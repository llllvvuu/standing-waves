{"version":3,"sources":["../src/worker/server.js"],"names":["_","e","laplacian","waves","omp"],"mappings":"AAAA,cAAc,8BAA8B,EAE5C,OAAO,qBAAuB,MAAOA,GAAM,CACzC,KAAK,cAAgB,OAAO,cAC5B,KAAK,eAAiB,OAAO,eAC7B,KAAK,eAAiB,OAAO,eAC7B,KAAK,IAAM,OAAO,IAElB,KAAK,YAAY,CAAE,KAAM,WAAY,CAAC,CACxC,EAEA,KAAK,UAAaC,GAAM,CACtB,GAAIA,EAAE,KAAK,OAAS,sBAAuB,CACzC,IAAMC,EAAY,KAAK,cAAc,GAAGD,EAAE,KAAK,UAAU,EACnDE,EAAQ,eAAeD,EAAW,EAAE,EAC1C,KAAK,YAAY,CACf,KAAM,mBACN,WAAYD,EAAE,KAAK,WACnB,KAAME,EAAM,QAAQ,CACtB,CAAC,CACH,SAAWF,EAAE,KAAK,OAAS,uBAAwB,CACjD,IAAMC,EAAY,KAAK,eAAe,GAAGD,EAAE,KAAK,UAAU,EACpDE,EAAQ,eAAeD,EAAW,EAAE,EAC1C,KAAK,YAAY,CACf,KAAM,oBACN,WAAYD,EAAE,KAAK,WACnB,KAAME,EAAM,QAAQ,CACtB,CAAC,CACH,SAAWF,EAAE,KAAK,OAAS,SAAU,CACnC,IAAMG,EAAM,KAAK,IAAI,GAAGH,EAAE,KAAK,UAAU,EACzC,KAAK,YAAY,CACf,KAAM,MACN,IAAKA,EAAE,KAAK,IACZ,KAAMG,CACR,CAAC,CACH,CACF","sourcesContent":["importScripts(\"../wasm/standing_waves_em.js\")\n\nModule.onRuntimeInitialized = async (_) => {\n  self.hex_laplacian = Module.hex_laplacian\n  self.rect_laplacian = Module.rect_laplacian\n  self.standing_waves = Module.standing_waves\n  self.omp = Module.omp\n\n  self.postMessage({ type: \"wasmReady\" })\n}\n\nself.onmessage = (e) => {\n  if (e.data.type === \"getHexStandingWaves\") {\n    const laplacian = self.hex_laplacian(...e.data.parameters)\n    const waves = standing_waves(laplacian, -1)\n    self.postMessage({\n      type: \"hexStandingWaves\",\n      parameters: e.data.parameters,\n      data: waves.reverse(),\n    })\n  } else if (e.data.type === \"getRectStandingWaves\") {\n    const laplacian = self.rect_laplacian(...e.data.parameters)\n    const waves = standing_waves(laplacian, -1)\n    self.postMessage({\n      type: \"rectStandingWaves\",\n      parameters: e.data.parameters,\n      data: waves.reverse(),\n    })\n  } else if (e.data.type === \"getOmp\") {\n    const omp = self.omp(...e.data.parameters)\n    self.postMessage({\n      type: \"omp\",\n      key: e.data.key,\n      data: omp,\n    })\n  }\n}\n"]}